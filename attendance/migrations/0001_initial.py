# Generated by Django 5.0.6 on 2025-05-15 13:13

import attendance.models
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Class',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter the class name (e.g., Grade 10, First Year)', max_length=100, validators=[django.core.validators.MinLengthValidator(2)])),
                ('section', models.CharField(help_text='Enter the section (e.g., A, B, C)', max_length=10)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'Classes',
                'ordering': ['name', 'section'],
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Enter the student's full name", max_length=100, validators=[django.core.validators.MinLengthValidator(2)])),
                ('roll_no', models.CharField(help_text="Enter the student's roll number", max_length=20)),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other')], help_text="Select the student's gender", max_length=1)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('class_name', models.ForeignKey(help_text="Select the student's class", on_delete=django.db.models.deletion.CASCADE, related_name='students', to='attendance.class')),
            ],
            options={
                'ordering': ['class_name', 'roll_no'],
                'unique_together': {('roll_no', 'class_name')},
            },
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter the subject name (e.g., Mathematics, Physics)', max_length=100, unique=True, validators=[django.core.validators.MinLengthValidator(2)])),
                ('code', models.CharField(help_text='Enter a unique subject code (e.g., MATH101)', max_length=10, unique=True, validators=[django.core.validators.RegexValidator(message='Code must contain only uppercase letters and numbers', regex='^[A-Z0-9]+$')])),
                ('default_classes_per_session', models.PositiveIntegerField(default=1, help_text='Default number of classes per session', validators=[django.core.validators.MinValueValidator(1)])),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('teacher', models.ForeignKey(help_text='Select the teacher for this subject', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='taught_subjects', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.AddField(
            model_name='class',
            name='subjects',
            field=models.ManyToManyField(help_text='Select subjects for this class', related_name='classes', to='attendance.subject'),
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fullname', models.CharField(max_length=100, validators=[django.core.validators.RegexValidator(message='Name can only contain letters and spaces', regex='^[a-zA-Z\\s]*$')])),
                ('role', models.CharField(choices=[('faculty', 'Faculty'), ('hod', 'HoD')], max_length=10, validators=[attendance.models.validate_role])),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['fullname'],
                'indexes': [models.Index(fields=['fullname'], name='attendance__fullnam_06a254_idx')],
            },
        ),
        migrations.AlterUniqueTogether(
            name='class',
            unique_together={('name', 'section')},
        ),
        migrations.CreateModel(
            name='Attendance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=django.utils.timezone.now)),
                ('status', models.BooleanField(default=True, help_text='Check if the student was present')),
                ('remarks', models.TextField(blank=True, help_text='Any additional remarks about the attendance', null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_attendance_records', to=settings.AUTH_USER_MODEL)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attendance_records', to='attendance.student')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attendance_records', to='attendance.subject')),
            ],
            options={
                'verbose_name_plural': 'Attendance records',
                'ordering': ['-date', '-created_at'],
                'unique_together': {('student', 'subject', 'date')},
            },
        ),
    ]
